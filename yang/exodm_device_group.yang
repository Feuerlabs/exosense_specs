submodule exodm_device_group {
    belongs-to "exodm" {
	prefix exodm;
    }

    import ietf-inet-types {
      prefix inet;
    }
    import exodm_type {
      prefix exodm_type;
    }

    description "API for Exosense Device Management Server, device group part";

    contact "ulf.wiger@feuerlabs.com";
    organization "Feuerlabs, Inc.";

    // INTERNAL INFO!
    // <uid>/groups/<gid>/name
    // <uid>/groups/<gid>/url
    //
    list groups {
	description "Device group information";

	key "gid";

	leaf gid {
	  description "group id";
	  type uint32;
	}

	leaf name {
	    type string;
	}

	leaf notification-url {
	    description "Where to send notifications";
	    type inet:uri;
	}
    }


    rpc create-device-group {
        description "RPC to create a device group";

        input {
            leaf name {
                description "Group name";
                type exodm_type:id-string;
            }
            leaf notification-url {
                description "RPC callback notification URL";
                type inet:uri;
            }
        }

        output {
            leaf result {
                type exodm_type:result-code;
            }
            leaf gid {
                description "Group identifier. 0 (zero) if operation failed.";
                type uint32;
            }
        }
    }

    rpc delete-device-group {
        description "RPC to create a device group";

        input {
            leaf gid {
                description "Group ID";
                type uint32;
            }
        }

        output {
            leaf result {
                type exodm_type:result-code;
            }
        }
    }

 
    rpc list-device-groups {
      description "List device groups, N entries at a time";

      input {
	leaf n {
	  description "Number of entries to fetch";
	  type uint32;
	}
	leaf previous {
	  description
	    "Previous device group id (GID); \"\" if from beginning";
	  type uint32;
	}
 	leaf device-id {
 	  description
 	    "Optional device ID. If given, device groups associated with " +
 	    "the given device are listed.";
 	  type exodm_type:id-string;
 	}
      }
      output {
	list device-groups {
	  leaf gid {
	    type uint32;
	  }
	  leaf name {
	    type exodm_type:id-string;
	  }
	  leaf notification-url {
	    type inet:uri;
	  }
	}
      }
    }


    rpc list-device-group-members {
        description "List devices attached to a device group, " +
	  "N entries at a time";

        input {
	  leaf gid {
	    description "ID of the device group";
	    type uint32;
	  }
	  leaf n {
	    description "Number of entries to fetch";
	    type uint32;
	  }
	  leaf previous {
	    description "Previous device; \"\" if from beginning";
	    type exodm_type:id-string;
	  }
        }
        output {
	  leaf-list device-group-members {
	    description "";
	    type exodm_type:id-string;
	  }
	}
    }


    rpc add-device-group-members {
        description "Link devices to device groups";
        input {
            leaf-list device-groups {
                description
		  "Device groups to associate with the given device(s)";
                type uint32;
            }
            leaf-list dev-id {
                description "List of Device ID(s)";
                type exodm_type:id-string;
            }
        }

        output {
            leaf result {
                type exodm_type:result-code;
            }
        }
    }

    rpc remove-device-group-members {
      description "Unlink devices from device groups";
      input {
	leaf-list device-groups {
	  description
	    "Device groups to unlink the given device(s) from";
	  min-elements 1;
	  type uint32;
	}
	leaf-list dev-id {
	  description "List of device ID(s)";
	  min-elements 1;
	  type exodm_type:id-string;
	  }
	}
      output {
	leaf result {
	  type exodm_type:result-code;
	}
      }
    }


    rpc update-device-group {
        description "RPC to change the notification URL of an existing group";

        input {
            leaf gid {
                description "Group identifier.";
                type uint32;
            }
            leaf notification-url {
                description "RPC callback notification URL";
                type inet:uri;
            }
        }

        output {
            leaf result {
                type exodm_type:result-code;
            }
        }
    }
}


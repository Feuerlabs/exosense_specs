submodule exodm_device_group {

  belongs-to "exodm" {
    prefix exodm;
  }

  import ietf-inet-types {
    prefix inet;
  }
  import exodm_type {
    prefix exodm_type;
  }

  description 
      "API for Exosense Device Management Server - Device Type Management " +
      "(C) 2013 Feurelabs, Inc - All Rights Reserved.";

  contact "ulf.wiger@feuerlabs.com";
  organization "Feuerlabs, Inc.";

  // INTERNAL INFO!
  // <uid>/groups/<group-id>/name
  // <uid>/groups/<group-id>/url
  //
  list groups {
    description "Device group information.";

    key "group-id";

    leaf group-id {
      description "group id";
      type exodm_type:id-string;
    }

    leaf name {
      type string;
    }

    leaf notification-url {
      description "Where to send notifications.";
      type inet:uri;
    }
  }


  rpc create-device-group {
    description
"**Create a device group**\n\n
This command creates a new device group that can have devices added to
it.  The name of the group must be unique across all device IDs and
device groups owned by the given account.
A device group can have devices added to it through the
[exodm:add-device-group-memberss] Once a group has been created, and
devices have been added to it , an RPC command in a package can be
invoked on all member devices by sending the RPC to the device group
instead of individual devices.

Incoming RPCs from member devices will be sent to the notification URL of
all device groups that the device is a member of. See
[exodm:add-device-group-members] for details.

Packages installed on a group will be pushed out to all devices of
that group.";
    input {
	leaf account {
	    description
"The account, accessible by the authorizing user, that will own the " +
"device group. If no account is given, the authorizing user assumes " +
"to have access to only one account, which will be used. If no " +
"account is given, and the user has access to multiple accounts, an error " +
"is returned.";

	    type exodm_type:id-string;
	}

	leaf group-name {
	    description
"Name of the device group. Must be unqiue across all devices and groups " +
"owned by the account.";
	    type exodm_type:id-string;
	    mandatory true;
	}

	leaf notification-url {
	    description "Callback to forward device originated RPCs to.";
	    type inet:uri;
	    mandatory true;
	}

    }

    output {
	leaf result {
	    description "Result of the operation";
	    type exodm_type:result-code;
	}
    }
  }

  rpc delete-device-group {
    description
"**Delete a device group**\n\n" +
"This command deletes a device group previously created through a " +
"[exodm:create-device-group] command.  Any devices added to the group " +
"through an [exodm:add-device-group-members] will be " +
"removed as members from it prior to the groups deletion.";

    input {
	leaf account {
        description
"The account, accessible by the authorizing user, that owns the " +
"device group to delete. If no account is given, the authorizing user assumes " +
"to have access to only one account, which will be used. If no " +
"account is given, and the user has access to multiple accounts, an error " +
"is returned.";
        type exodm_type:id-string;
      }

      leaf group-name {
        description "Name of the device group to delete";
	type exodm_type:id-string;
        mandatory true;
      }
   }

    output {
      leaf result {
	  description "Result of the operation";
	  type exodm_type:result-code;
      }
    }
  }


  rpc list-device-groups {
    description
"**List all device groups owned by an account**\n\n " +
"This command will return all device groups created under an account " +
"through the [exodm:create-device-group] command." +
"\n\n\n\n"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of device names";

    input {
	leaf account {
	    description
"The account, accessible by the authorizing user, to list the device " +
"groups for. If no account is given, the authorizing user assumes " +
"to have access to only one account, which will be used. If no " +
"account is given, and the user has access to multiple accounts, an error " +
"is returned.";
	    type exodm_type:id-string;
	}

	leaf n {
	    description
		"Maximum number of entries to return. More device groups may be available " +
		"after the last returned element.";
	    mandatory true;
		type uint32;
	}
	leaf previous {
	    description
		'Start the fetch at the first device group after that with the ' +
		'name specified by this argument. Use "" if the fetch is to start from the beginning';
	    mandatory true;
	    type exodm_type:id-string;
	}

	leaf device-id {
	    description
		"Optional device ID. If given, device groups associated with " +
		"the given device are listed.";
	    type exodm_type:id-string;
	}
    }
    output {
	list device-groups {
	    leaf group-name {
		description "The name of the device group";
		type exodm_type:id-string;
	    }
	    leaf notification-url {
		description "The notification URL of the device group";
		type inet:uri;
	    }
	}
    }
  }


  rpc list-device-group-members {
    description
"**List all device members of a device group under an account**\n\n " +
"This command will list all devices that are a member of the given " +
"device group. The listed devices have previously been added to the " +
"group through an [exodm:add-device-group-members] call." +
"\n\n\n\n"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of device names";

    input {
      leaf account {
	    description
"The account, accessible by the authorizing user, that owns the device " +
"group.  If no account is given, the authorizing user assumes " +
"to have access to only one account, which will be used. If no " +
"account is given, and the user has access to multiple accounts, an error " +
"is returned.";

        type exodm_type:id-string;
      }
      leaf group-name {
        description "Name of the device group to list members for";
	type exodm_type:id-string;
        mandatory true;
      }
      leaf n {
	  description
	      "Maximum number of entries to return. More devices may be available " +
	      "after the last returned element.";
	  mandatory true;
	  type uint32;
      }
      leaf previous {
	  description
	      'Start the fetch at the first devices after that with the ' +
	      'device ID specified by this argument. Use "" if the fetch is to start from the beginning';
	  mandatory true;
	  type exodm_type:id-string;
      }
    }
    output {
	list devices {
	    leaf device-id {
		description "The ID of the device";
		type exodm_type:id-string;
	    }

	    leaf primary {
		description "Set to true if this is the primary group for the given device";
		type boolean;
	    }
	}
      }
    }



  rpc add-device-group-members {
    description
"**Add one or more devices as members of a device group**\n\n" +
"This command will add a list of devices as members to a single " +
"device group.  Once this command has been completed, JSON-RPCs sent " +
"to the device group will be forwarded to all member devices. " +
"\n\n\n\n " +
"If a device, who is a member of multiple groups, sends an RPC to the " +
"Exosense Server, the RPC will be forwarded to the notification URL (as " +
"JSON-RPC) of all groups. The reply to send back to the device is read
from the device group marked as primary for the device. This allows
multiple URLs to receive device data while ensuring that only one
reply is sent back to the device." +
"\n\n\n\n " +
"If a device is only member of a single group, the primary flag is " +
"ignored." +
"\n\n " +
"If a device itself has a notification URL configured, incoming RPCs from the device will be " +
"forwarded to that URL and the notification URL of all device groups
that the device is a member of. In these cases, the reply to send back
to the device will always be read from the notification URL of the
device, thus silently dropping the reply from all device groups that
the device is a member of, including the primary group." +
"\n\n\n\n " +
"If a device is member of a device group, and has it marked as primary, " +
"when the [exodm:add-device-group-members] command also has the primary flag " +
"set, the primary flag will be moved from the previous group to the new " +
"one for the device. Thus, only one group will be marked as primary for " +
"a device at any given time.";

    input {
      leaf account {
	    description
"The account, accessible by the authorizing user, that owns the device " +
"group and devices.  If no account is given, the authorizing user assumes " +
"to have access to only one account, which will be used. If no " +
"account is given, and the user has access to multiple accounts, an error " +
"is returned.";
        type exodm_type:id-string;
      }

      leaf group-name {
        description
	    "Name of device group to which to add the given device(s) as members";
	type exodm_type:id-string;

      }

      leaf-list device-id {
        description "List of device IDs to add as members to the given device group";
        type exodm_type:id-string;
      }
      leaf primary {
	  description
"Flag to indicate that this group should be marked as the primary group for all added devices.
If any of the added devices already have primary groups setup, those groups will be de-selected
in favor of the group specified by this call.";
	  type boolean;
	  default false;
      }
    }

    output {
      leaf result {
	  description "Result of the operation";
        type exodm_type:result-code;
      }
    }
  }

  rpc remove-device-group-members {
    description
"**Remove a list of devices as members from a device group**\n\n" +
"This command removes the specified devices from the given group. The " +
"devices have previously been added to the group through the " +
"[exodm:add-device-group-members] command.  If a device removed from a group " +
"has that group marked as primary, and the device will still be member
of more than one group, and the device itself does "+
"not have a notification URL setup, then any future RPCs received from " +
"that device will result in an error being sent back to it " +
"by the Exosense Server. This is due to the fact that Exosense does not
know which notification URL to read the reply from.";
    input {
      leaf account {
	    description
"The account, accessible by the authorizing user, that owns the device " +
"group and devices.  If no account is given, the authorizing user assumes " +
"to have access to only one account, which will be used. If no " +
"account is given, and the user has access to multiple accounts, an error " +
"is returned.";

	    type exodm_type:id-string;
      }
      leaf group-name {
        description
          "Name of the device group to remove the device(s) from.";
        type exodm_type:id-string;
      }

      leaf-list device-id {
        description "The Device IDs of the devices to remove as members from the device group.";
        type exodm_type:id-string;
      }
    }
    output {
      leaf result {
	  description "Result of the operation";
        type exodm_type:result-code;
      }
    }
  }


  rpc update-device-group {
    description
"**Update a device group**\n\n" +
"This command will update the notification URL of the given device " +
"group. Once this command has completed, any incoming, device-orignated " +
"RPCs sent to the device group will be forwarded as JSON-RPC to the "+
"given URL.";

    input {
      leaf account {
	    description
"The account, accessible by the authorizing user, that owns the device " +
"group.  If no account is given, the authorizing user assumes " +
"to have access to only one account, which will be used. If no " +
"account is given, and the user has access to multiple accounts, an error " +
"is returned.";
        type exodm_type:id-string;
      }
	leaf group-name {
	    description
		"Name of the device group to update.";
	    type exodm_type:id-string;
	    mandatory true;
	}

	leaf notification-url {
	    description "RPC notification URL to forward for incoming device-originated RPCs to.";
        type inet:uri;
        mandatory true;
      }
    }

    output {
      leaf result {
	  description "Result of the operation";
        type exodm_type:result-code;
      }
    }
  }
}


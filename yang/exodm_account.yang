submodule exodm_account {

  belongs-to "exodm" {
    prefix "exodm";
  }

  import exodm_type {
    prefix exodm_type;
  }


  description 
      "API for Exosense Device Management Server - Account Management. " +
      "(C) 2013 Feurelabs, Inc - All Rights Reserved.";

  contact "magnus.feuer@feuerlabs.com";
  organization "Feuerlabs, Inc.";

  rpc create-account {
    description
"**Create a new account**\n\n" +
"This call, which must be invoked by the exodm-admin user from the same host that the " +
"server is running on, creates a new Exosense " +
"Account. The created account can give access permission to users that will " +
"manage the devices, device groups, packages, etc, owned by the account. " +
"\n\n\n\n" +
"When the account is created, an account admin user, [name]-admin will be also be " +
"automatically created. This user acts as the initial administrator for " +
"the account and can be used to manage all resources owned by the " +
"account. The name of the account admin is the value of the name "+
"argument with an -admin suffix.";


    input {
      leaf name {
	  description
"The name of the account. This name has to be unique across all " +
"accounts created in the Exosense Server.";

	  type exodm_type:id-string;
	  mandatory true;
      }
    }
    output {
      leaf result {
	  description "The result of the operation.";
	  type exodm_type:result-code; }
    }
  }

  rpc update-account {
    description
"**Update an existing account**\n\n" +
"This call, which must be invoked by the exodm-admin user from the same host that the " +
"server is running on, modifies the name of an account " +
"previously created with a [exodm:create-account] command. The new name " +
"of the account must be unique across all accounts in the Exosense " +
"Server.";
    input {
      leaf name {
        description
"The name of the account. This name has to be unique across all " +
"accounts created in the Exosense Server.";

        type exodm_type:id-string;
      }
    }

    output {
      leaf result {
	  description "The result of the operation.";
	  type exodm_type:result-code;
      }
    }
  }

  rpc delete-account {
    description
"**Delete an existing account\n\n**" +
"This call, which must be invoked by the exodm-admin user from the same host that the " +
"server is running on, removes the account specified by " +
"the name argument. If the given account owns any devices, device " +
"types, device groups, packages, configuration sets or yang " +
"specifications, they will be deleted together with the account.";
    input {
      leaf name {
        description "The name of the account to delete.";
        type exodm_type:id-string;
        mandatory true;
      }
    }

    output {
      leaf result {
	  description "The result of the operation.";
        type exodm_type:result-code;
      }
    }
  }

  rpc list-accounts {
    description
"**List all accounts in the Exosense Server**\n\n" +
"This command will list all accounts created in the Exosense " +
"Server. The command has to be executed by the exodm-admin user on the " +
"same host as the server is executing." +
"\n\n\n\n"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of accounts.";
    input {
      leaf n {
        description
"Maximum number of entries to return. More accounts may be available " +
"after the last returned element.";
        type uint32;
        mandatory true;
      }
      leaf previous {
	  description
'Start the fetch at the first account after the account with the ' +
'name specified by this argument. Use "" if the fetch is to start from the beginning';
        type exodm_type:id-string;
        mandatory true;
      }
    }
    output {
      leaf-list accounts {
        description "List of account names";
        type exodm_type:id-string;
      }
    }
  }

  rpc add-user-to-account {
      description
"**Add a user to an account**\n\n" +
"This command adds the specified user to the given account. Once a user " +
"has been added to an account, the user can be assigned to roles in the " +
"given account through the [exodm:add-user-to-role] command. The user " +
"will then be able to execute all RPCs, assigned to the role through " +
"the [exodm:add-role-execution-permission] command, on all devices " +
"owned by the account.";

      input {

	  leaf account {
	      description
		  "The account to add the user to";
	      type exodm_type:id-string;
	  }

	  leaf uname {
	      description
		  "The user to add to the account.";
	      type exodm_type:id-string;
	  }
      }
      output {
	  leaf result {
	      description "The result of the operation.";
	      type exodm_type:result-code;
	  }
      }
  }

  rpc remove-account-users {
      description
"**Remove a user from an account**\n\n" +
"This command removes the specified user to the given account. Once a " +
"user has been removed to an account, any previous RPCs that the user " +
"could execute on devices owned by the account will become " +
"inaccessible.";

      input {

	  leaf account {
	      description
		  "The account to remove the user from";
	      type exodm_type:id-string;
	  }

	  leaf uname {
	      description
		  "The user to remove from the account.";
	      type exodm_type:id-string;
	  }
      }
      output {
	  leaf result {
	      description "The result of the operation.";
	      type exodm_type:result-code;
	  }
      }
  }

  rpc list-account-users {
    description
"**List all users with access to the specified account\n\n**" +
"This command will list all users who have been given access to the " +
"given account through [exodm:add-user-to-account] commands." +
"\n\n\n\n"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of user names.";
    input {
      leaf account {
	  description
"The account, accessible by the authorizing user, to list the users for." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.";
        type exodm_type:id-string;
        mandatory true;
      }
      leaf n {
	  description
"Maximum number of entries to return. More users may be available " +
"after the last returned element.";
        type uint32;
        mandatory true;
      }
      leaf previous {
        description
'Start the fetch at the first user after the user with the ' +
'name specified by this argument. Use "" if the fetch is to start from the beginning';
        type exodm_type:id-string;
        mandatory true;
      }
    }
    output {
      leaf-list users {
        description
"The (partial) list of user names with access to the given account.";
        type exodm_type:id-string;
      }
    }
  }
}
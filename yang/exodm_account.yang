submodule exodm_account {
  belongs-to "exodm" {
    prefix "exodm";
  }

  import exodm_type {
    prefix exodm_type;
  }


  description "API for Exosense Device Management Server, account part";

  contact "magnus.feuer@feuerlabs.com";
  organization "Feuerlabs, Inc.";

  rpc create-account {
    description
"**Create a new account**<br>" +
"This call, which must be invoked by the sysadm user, creates a new Exosense " +
"Account. The created account can give access permission to users that will " +
"manage the devices, device groups, packages, etc, owned by the account. " +
"<br><br>" +
"When the account is created, an account admin user will be also be " +
"automatically created. This user acts as the initial administrator for " +
"the account and can be used to manage all resources owned by the " +
"account. The name of the account admin is provided in the admin-user " +
"argument of this call. ";


    input {
      leaf name {
	  description
"The name of the account. This name has to be unique across all " +
"accounts created in the Exosense Server.";

	  type exodm_type:id-string;
	  mandatory true;
      }

      list admin-user {
	  description
"The initial account administrator user to create in conjunction with " +
"the account. The username has to be unique across all users created in " +
"the Exosense Server";


	key "uname";
	min-elements 1;
	max-elements 1;
	uses exodm_type:user-obj;
      }
    }
    output {
      leaf result {
	  description "The result of the operation.";
	  type exodm_type:result-code; }
    }
  }

  rpc update-account {
    description
"**Update an existing account**<br>" +
"This call modifies the name of an account " +
"previously created with a [exodm:create-account] command. The new name " +
"of the account must be unique across all accounts in the Exosense " +
"Server.";
    input {
      leaf name {
        description
"The name of the account. This name has to be unique across all " +
"accounts created in the Exosense Server.";

        type exodm_type:id-string;
      }
    }

    output {
      leaf result {
	  description "The result of the operation.";
	  type exodm_type:result-code;
      }
    }
  }

  rpc delete-account {
    description
"**Delete an existing account<br>**" +
"This command will remove the account specified by " +
"the name argument. If the given account owns any devices, device " +
"types, device groups, packages, configuration sets or yang " +
"specifications, they will be deleted together with the account.";
    input {
      leaf name {
        description "The name of the account to delete.";
        type exodm_type:id-string;
        mandatory true;
      }
    }

    output {
      leaf result {
        type exodm_type:result-code;
      }
    }
  }

  rpc list-accounts {
    description
"**List all accounts in the Exosense Server**<br>" +
"This command will list all accounts created in the Exosense " +
"Server. " +
"<br><br>"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of accounts.";
    input {
      leaf n {
        description
"Maximum number of entries to return. More accounts may be available " +
"after the last returned element.";
        type uint32;
        mandatory true;
      }
      leaf previous {
	  description
'Start the fetch at the first account after the account with the ' +
'name specified by this argument. Use "" if the fetch is to start from the beginning';
        type exodm_type:id-string;
        mandatory true;
      }
    }
    output {
      leaf-list accounts {
        description "List of account names";
        type exodm_type:id-string;
      }
    }
  }

  rpc list-account-users {
    description
"**List all users with access to the specified account<br>**" +
"This command will list all users who have been given access to the " +
"given account through [exodm:add-account-users] commands." +
"<br><br>"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of user names.";

    input {
      leaf "account" {
        type exodm_type:id-string;
        mandatory true;
      }
      leaf n {
	  description
"Maximum number of entries to return. More users may be available " +
"after the last returned element.";

        type uint32;
        mandatory true;
      }
      leaf previous {
        description
'Start the fetch at the first user after the user with the ' +
'name specified by this argument. Use "" if the fetch is to start from the beginning';
        type exodm_type:id-string;
        mandatory true;
      }
    }
    output {
      leaf-list users {
        description
"The (partial) list of user names with access to the given account.";
        type exodm_type:id-string;
      }
    }
  }

}
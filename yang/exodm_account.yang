submodule exodm_account {
  belongs-to "exodm" {
    prefix "exodm";
  }

  import exodm_type {
    prefix exodm_type;
  }


  description "API for Exosense Device Management Server, account part";

  contact "magnus.feuer@feuerlabs.com";
  organization "Feuerlabs, Inc.";

  rpc create-account {
    description 
"**Create a new account**<br>" + 
"This call, which must be invoked by the sysadm user, creates a new Exosense " + 
"Account. The created account can give access permission to users that will " + 
"manage the devices, device groups, packages, etc, owned by the account. " + 
"<br>" + 
"When the account is created, an account admin user will be also be " + 
"automatically created. This user acts as the initial administrator for " + 
"the account and can be used to manage all resources owned by the " + 
"account. The name of the account admin is provided in the admin-user " + 
"argument of this call. ";


    input {
      leaf name { 
	  description
"The name of the account. This name has to be unique across all " +
"accounts created in the Exosense Server.";

	  type exodm_type:id-string; 
	  mandatory true; 
      }
      
      list admin-user {
	  description 
"The initial account administrator user to create in conjunction with " +
"the account. The username has to be unique across all users created in " +
"the Exosense Server";


	key "uname";
	min-elements 1;
	max-elements 1;
	uses exodm_type:user-obj;
      }
    }
    output {
      leaf result { 
	  description "The result of the operation.";
	  type exodm_type:result-code; }
    }
  }

  rpc update-account {
    description
"**Update an existing account**<br>" +
"This call modifies the name of an account " +
"previously created with a [exodm:create-account] command. The new name " +
"of the account must be unique across all accounts in the Exosense " +
"Server.";
    input {
      leaf name {
        description 
"The name of the account. This name has to be unique across all " +
"accounts created in the Exosense Server.";

        type exodm_type:id-string;
      }
    }

    output {
      leaf result {
	  description "The result of the operation.";
	  type exodm_type:result-code;
      }
    }
  }

  rpc delete-account {
    description
"**Delete an existing account<br>**" +
"This command will remove the account specified by " +
"the name argument. If the given account owns any devices, device " +
"types, device groups, packages, configuration sets or yang " +
"specifications, they will be deleted together with the account.";
    input {
      leaf name {
        description "The name of the account to delete.";
        type exodm_type:id-string;
        mandatory true;        
      }
    }
      
    output {
      leaf result {
        type exodm_type:result-code;
      }
    }	
  }
  
  rpc list-accounts {
    description 
"**List all accounts in the Exosense Server**<br>" +
"This command will list all accounts created in the Exosense " + 
"Server. " +
"<br>"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of accounts.";
    input {
      leaf n {
        description 
"Maximum accounts of entries to return. More accounts may be available " +
"after the last returned element.";
        type uint32;
        mandatory true;        
      }
      leaf previous {
	  description 
'Start the fetch at the first account after the account with the ' +
'name specified by this argument. Use "" if the fetch is to start from the beginning';
        type exodm_type:id-string;
        mandatory true;        
      }
    }
    output {
      leaf-list accounts {
        description "List of account names";
        type exodm_type:id-string;
      }
    }
  }


  rpc add-account-users {
    description 
'**Add account access to existing user(s)**<br>' +
'This command gives one or more users access to the resources of an ' + 
'account through a role. Each role will give access to a predefined set ' + 
'of core Exosense Server JSON-RPC commands, as listed in the "Exosense ' + 
'JSON-RPC command Role assignment" chapter of the "Exosense Server ' + 
'Operations Manual. In addition to this, roles can also be given ' + 
'additional execution rights to RPCs defined for packages through their ' + 
'yang-specification. See the "Package" chapter of the "Exosense ' + 
'Operations Manual" and [exodm:create-package] for details on RPCs and ' + 
'Yang specifications. ' + 
'<br>' + 
'Once one or more roles have been assigned to a user, that user can ' + 
'execute all JSON-RPC commands that those roles have execution rights ' + 
'for on the given account. ' + 
'<br>' + 
'The [exodm:list-account-roles] command can be used to retrieve a list of ' + 
'all availale roles for an account';
    input {
      leaf "account" { 
	  description
"The account to give a user access to. The account has previously been " +
"created with a [exodm:create-account] command.";
	  type exodm_type:id-string; 
	  mandatory true; 
      }
      leaf "role" { 
	  description
"The role to assign to the user for the specified account. The value of " +
"this arument must be from the list of roles returned by " +
"[exodm:list-account-roles]";
	  type exodm_type:id-string; 
	  mandatory true; 
      }

      leaf-list unames { 
        description
"Users to add to account. " +
"The users, previously created through the [exodm:create-user] or " +
"[exodm:create-account] commands, to be assigned the given role for " +
"this account.";

        min-elements 1;
        max-elements 10;
        type exodm_type:id-string; 
      }
    }    
    output {
      leaf result { 
	  description "Result of the operation";
	  type exodm_type:result-code; 
      }
    }
  }

  rpc remove-account-users {
    description 
'**Remove account access from one or more existing user(s)**<br>' +
'This command removes access for one or more users access to the ' +
'resources of an account. Access retraction is done by removing a ' +
'specific role, previously asssigned with [exodm:add-account-users], ' +
'from users. Once the role has been removed from the user, it can no ' +
'longer run the JSON-RPC commands that the role had execution rights ' + 
'for (unless the user is also assigned other roles that have execution ' + 
'rights for the same commands).  See the "Package" chapter of the ' + 
'"Exosense Operations Manual" and [exodm:create-package] for details on RPCs and ' + 
'Yang specifications.' + 
'<br>' + 
'The [exodm:list-account-roles] command can be used to retrieve a list of ' + 
'all availale roles for an account Any other roles that the user may ' +
'have in other accounts than the one specified by' +
'the account argument, are unaffected by this command.';
    input {
      leaf "account" { 
	  description
"The account to remove user access from. The account has previously been " +
"created with a [exodm:create-account] command.";
	  type exodm_type:id-string; 
	  mandatory true; 
      }
      leaf "role" {
	  description
"The role to strip the given user of for the specified account.The value of " +
"this arument must be from the list of roles returned by " +
"[exodm:list-account-roles]";
	  type exodm_type:id-string; 
	  mandatory true; 
      }
      leaf-list unames { 
        description
"Users to strip of the specified role for this account. Listed users " +
"must previously have been assingned the role through an " +
"[exodm:add-account-users] command.";
        min-elements 1;
        max-elements 10;
        type exodm_type:id-string; 
      }
    }

    output {
      leaf result { 
	  description "Result of the operation";
	  type exodm_type:result-code; 
      }
    }
  }

  rpc list-account-users {
    description 
"**List all users with access to the specified account<br>**" +
"This command will list all users who have been given access to the " +
"given account through [exodm:add-account-users] commands." +
"<br>"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of user names.";

    input {
      leaf "account" { 
        type exodm_type:id-string;
        mandatory true;        
      }
      leaf n {
	  description
"Maximum accounts of entries to return. More users may be available " +
"after the last returned element.";

        type uint32;
        mandatory true;        
      }
      leaf previous {
        description 
'Start the fetch at the first user after the user with the ' +
'name specified by this argument. Use "" if the fetch is to start from the beginning';
        type exodm_type:id-string;
        mandatory true;        
      }
    }
    output {
      leaf-list users {
        description 
"The (partial) list of user names with access to the given account."; 
        type exodm_type:id-string;
      }
    }
  }

  rpc list-account-roles {
    description 
"**List all roles defined for account**<br>" +
"This command will return all roles in account that can be assigned to users in order " +
"for them to access resources owned by the account.";
    input {

      leaf "account" { 
	  description
"The account to list all roles for. The account has been created with " +
"a previous [exodm:create-account] call.";
        type exodm_type:id-string;
        mandatory true;        
      }

      leaf n {
        description 
"Maximum accounts of entries to return. More roles may be available " +
"after the last returned element.";
        type uint32;
        mandatory true;        
      }

      leaf previous {
        description 
'Start the fetch at the firstrole after the user with the ' +
'name specified by this argument. Use "" if the fetch is to start from the beginning';
        type exodm_type:id-string;
        mandatory true;        
      }
    }

    output {
      leaf-list roles {
        description "List of role names assignable to users."; 
        type exodm_type:id-string;
      }
    }
  }
}
submodule exodm_package {
    belongs-to "exodm" {
	prefix exodm;
    }

    import exosense {
	prefix exo;
    }
    import exodm_type {
	prefix exodm_type;
    }


    description "API for Exosense Device Management Server, package part";

    contact "ulf.wiger@feuerlabs.com";
    organization "Feuerlabs, Inc.";

    rpc create-package {
	description
	    "Create a package in the database to be forwarded to devices.";
	input {
	    leaf account {
		description "The account under which the package is installed.";
		type exodm_type:id-string;
	    }

	    leaf package-name {
		description "Name of package.";
		type string {
		    length "1..256";
		}
	    }

            leaf-list dependencies {
		description "List of packages that must be installed prior to this on a device";
		type exodm_type:id-string;
	    }


	    leaf-list uprade-from-packages {
		description "List of packages that can be upgraded by this package.";
		type exodm_type:id-string;
	    }

	    leaf yang-specification {
		description "Yang specification containing the API and configuration data definitions.";
		mandatory false;
		type exodm_type:id-string;
	    }

	    leaf configuration-container {
		description "Container within the Yang specification that has the configuration data definition.";
		mandatory false;
		type exodm_type:id-string;
	    }

	    leaf api-container {
		description "Container within the Yang specification that has the RPC API definition.";
		mandatory false;
		type exodm_type:id-string;
	    }

	    anyxml image {
		description "The package image itself.";
	    }

	}

	output {
	    leaf result {
		type exodm_type:result-code;
	    }
	}
    }



    rpc add-package-members {
	description
	    "Add members to the list of devices to receive the package. The device type of each " +
	    "added device-id must have the package as a part of its allowed packages.";

	input {
	    leaf account {
		description "The account to which the device type belongs.";
		type exodm_type:id-string;
	    }

	    leaf-list package-name {
		description
		    "Configuration data instances to associate with " +
		    "the given device(s)";
		type exodm_type:id-string;
	    }

	    leaf device-id {
		description
		    "Device type to accept this package.";
		type exodm_type:id-string;
	    }

	    leaf install-arguments {
		description
		    "Arguments to be provided to the device package manager when package " +
		    "is installed on the given device type. The arguments will be provided to " +
		    "the install software on the device.";

		mandatory false;
		type string {
		    length "1..256";
		}
	    }

	    leaf upgrade-arguments {
		description
		    "Arguments to be provided to the device package manager when package " +
		    "is upgraded from an earlier version on the given device type. " +
		    "The arguments will be provided to the install software on the device.";

		mandatory false;
		type string {
		    length "1..256";
		}
	    }

	    leaf uninstall-arguments {
		description
		    "Arguments to be provided to the device package manager when package " +
		    "is uninstalled on the given device type. " +
		    "The arguments will be provided to the install software on the device.";

		mandatory false;
		type string {
		    length "1..256";
		}
	    }
	}

	output {
	    leaf result {
		type exodm_type:result-code;
	    }
	}
    }

    rpc install-package {
	description
	    "Installs the package on all listed devices and/or device groups. The package " +
	    "will be transmitted to all devices, and device group member devices, and then installed. " +
	    "For each successful or failed transmit and install operation, a notification will be sent " +
	    "back to the invoking server.";

	input {
	    leaf account {
		description "The account to which the package and devices belong.";
		type exodm_type:id-string;
	    }

	    leaf package-name {
		description "The name of the package to install";
		mandatory true;
		type exodm_type:id-string;
	    }

	    leaf-list targets {
		description
		    "Mix of device-ids and device group ids for all devices to have the " +
		    "package installed.";

		type exodm_type:id-string;
	    }

	    leaf recursive {
		description
		    "Recursively transmit and install any packages that this package is dependent upon.";

		default false;
		type boolean;
	    }

	    leaf timeout {
		description
		    "How many seconds to wait for the package to be installed on the target " +
		    "devices before returning a timeout error. Default is one week.";

		default 604800;
		type uint32;
	    }
	}

	output {
	    leaf result {
		type exodm_type:result-code;
	    }
	}
    }


    rpc upgrade-package {
	description
	    "Upgrades from one package to another on all listed devices and/or device groups. The package " +
	    "will be transmitted to all devices, and device group member devices, and then installed. " +
	    "For each successful or failed transmit and install operation, a notification will be sent " +
	    "back to the invoking server.";

	input {
	    leaf account {
		description "The account to which the package and devices belong.";
		type exodm_type:id-string;
	    }

	    leaf from-package-name {
		description "The name of the package already installed on the device to upgrade. ";
		mandatory true;
		type exodm_type:id-string;
	    }

	    leaf to-package-name {
		description "The name of the package to use to upgrade the from-oackage. ";
		mandatory true;
		type exodm_type:id-string;
	    }

	    leaf-list targets {
		description
		    "Mix of device-ids and device group ids for all devices to have the " +
		    "upgrade performed.";

		type exodm_type:id-string;
	    }

	    leaf recursive {
		description
		    "Recursively transmit and install any packages that to-package-name is dependent upon.";

		default false;
		type boolean;
	    }

	    leaf remove-unused {
		description
		    "Remove any package images not needed after the upgrade from the device.";

		default false;
		type boolean;
	    }

	    leaf timeout {
		description
		    "How many seconds to wait for the package to be upgraded on the target " +
		    "devices before returning a timeout error. Default is one week.";

		default 604800;
		type uint32;
	    }
	}

	output {
	    leaf result {
		type exodm_type:result-code;
	    }
	}
    }



    rpc uninstall-package {
	description
	    "Uninstalls a packagefrom all listed devices and/or device groups. The package " +
	    "will be uninstalled from all devices, and device group member devices. " +
	    "For each successful or failed uninstall operation, a notification will be sent " +
	    "back to the invoking server.";

	input {
	    leaf account {
		description "The account to which the package and devices belong.";
		type exodm_type:id-string;
	    }

	    leaf package {
		description "The name of the package already installed on the device to uninstall.";
		mandatory true;
		type exodm_type:id-string;
	    }


	    leaf-list targets {
		description
		    "Mix of device-ids and device group ids for all devices to have the " +
		    "uninstall performed.";

		type exodm_type:id-string;
	    }

	    leaf remove-unused {
		description
		    "Remove the package image from the device.";

		default true;
		type boolean;
	    }

	    leaf timeout {
		description
		    "How many seconds to wait for the package to be removed from the target " +
		    "devices before returning a timeout error. Default is one week.";

		default 604800;
		type uint32;
	    }
	}

	output {
	    leaf result {
		type exodm_type:result-code;
	    }
	}
    }

    notification package-operation-notification {
	description
	    "A notification sent back from the Exosense Server to the backend server " +
	    "to report the progress of an install/upgrade/uninstall operation. " +
	    "One notification will be sent back for each device that is to process the "+
	    "operaiton. " +
	    "The device ID that the notification is about. This device is listed, " +
	    "either directly or as a device group member, in the targets list of " +
	    "the install-package command that this is a notification of.";

	leaf device-id {
	    description "The device that this notificaiton is in response to";
	    type exodm_type:id-string;

	}

	leaf package-name {
	    description "The device that this notificaiton is in response to";
	    type exodm_type:id-string;
	}

	leaf package-status {
	    description "The status of the packge install operation";

	    type enumeration {
		enum transmitted {
		    description
			"Package has been transmitted to device.";
		    value 0;
		}

		enum transmit-failed {
		    description
			"Package could not be transmitted to device.";
		    value 1;
		}

		enum installed {
		    description
			"Package installed on device";
		    value 2;
		}

		enum install-failed {
		    description
			"Package could not be installed on device";
		    value 3;
		}

		enum upgraded {
		    description
			"Package upgraded on device";
		    value 4;
		}

		enum upgrade-failed {
		    description
			"Package could not be upgraded device";
		    value 5;
		}

		enum uninstalled {
		    description
			"Package uninstalled from device";
		    value 6;
		}

		enum uninstall-failed {
		    description
			"Package could not be uninstalled from device";
		    value 7;
		}
	    }
	}
	uses exo:std-callback;
    }

    rpc list-packages {
	description "List all packages in the system";

	input {
	    leaf account {
		description "The account to list all packages for.";
		type exodm_type:id-string;
	    }
	}

	output {
	    leaf result {
		type exodm_type:result-code;
	    }

	    leaf-list packages {
		description "Name of package";

		type string {
		    length "1..256";
		}
	    }
	}
    }


    rpc get-package-device-types {
	description "List all device types that can install a given package.";

	input {
	    leaf account {
		description "The account to which the package belongs.";
		type exodm_type:id-string;
	    }

	    leaf package-name {
		description "The account to which list supported device types for.";
		type exodm_type:id-string;
	    }
	    leaf n {
		description "Number of entries to fetch";
		type uint32;
	    }
	    leaf previous {
		description
		    "Previous device-type name (GID); \"\" if from beginning";
		type uint32;
	    }
	}

	output {
	    leaf result {
		type exodm_type:result-code;
	    }

	    leaf-list device-types {
		description "List of device-types accepting the given package.";

		type exodm_type:id-string;
	    }
	}
    }


    rpc get-package-devices {
	description
	    "List all device types that have installed, or are in the process of " +
	    "installing the given package.";

	input {
	    leaf account {
		description "The account to which the package belongs.";
		type exodm_type:id-string;
	    }

	    leaf package-name {
		description "The account to which list supported device types for.";
		type exodm_type:id-string;
	    }
	    leaf n {
		description "Number of entries to fetch";
		type uint32;
	    }
	    leaf previous {
		description
		    "Previous device-id; \"\" if from beginning";
		type uint32;
	    }
	}

	output {
	    leaf result {
		type exodm_type:result-code;
	    }

	    list devices {
		leaf device-id {
		    type exodm_type:id-string;
		}
		leaf package-status {
		    type enumeration {
			enum pending-install {
			    description
				"The package is queued or in transmission to the device.";
			    value 0;
			}
			enum installed {
			    description
				"The package has been installed on the device.";
			    value 1;
			}
			enum pending-uninstall {
			    description
				"The uninstall command is queued for transmission to the device.";
			    value 2;
			}
			enum uninstalled {
			    description
				"The package has been uninstalled from the device.";
			    value 3;
			}
			enum removed {
			    description
				"The package has been uninstalled and removed from the device.";
			    value 4;
			}
			enum failed-install {
			    description
				"The package was transmitted to the device but could not be installed.";
			    value 5;
			}
			enum failed-uninstall {
			    description
				"The uninstall command was transmitted to the device but could not be executed.";
			    value 6;
			}
		    }
		}
	    }

	}
    }

    rpc update-package-config {
	description
	    "Set and push configuration data for a given package on a given device, " +
	    "or all member devices of a device group, to those devices. " +
	    "The package name is given together with an array of key/value pairs " +
	    "for the conrfiguration data to set for the given package on the given device. " +
	    "Each key/value pair must match an element in the yang file and container " +
	    "specified by the create-package yang-specification and configuration-container";

	input {
	    leaf account {
		description "The account to which the package belongs.";
		type exodm_type:id-string;
	    }

	    leaf device-id {
		description "The device or group id to set the config data for.";
		type exodm_type:id-string;
	    }

	    leaf package-name {
		description "The package to set the config data for in the target device.";
		type exodm_type:id-string;
	    }

	    leaf timeout {
		description
		    "How many seconds to wait for the configuration data to be sent to the " +
		    "device before returning a timeout error. Default is one week.";

		default 604800;
		type uint32;
	    }

	    anyxml values {
		description "Configuration values (validated against the yang specifification)";
	    }
	}
    }
}


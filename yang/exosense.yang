module exosense {

    prefix exo;

    namespace "http://feuerlabs.com/exosense";
    import exodm_type {
	prefix exodm_type;
    }


    description "Exosense standard RPC structures.";

    typedef timer {
      description "Kvdb_cron-type timer specification";
      type string {
	length "1..256";
      }
    }


    // Transaction id.
    typedef transaction-id {
	type uint32;
	description
"A transaction ID associated with an operation. " +
"Unlike the JSON-RPC level \"id\" element, the transaction-id can tie a " +
"single request together with one or more notifications and/or callback " +
"RPCs that are sent back as a result of the initial request.";
    }

    extension matching-notification {
      description "Used to pair RPC calls with following notifications.";
      argument "method";
    }

    extension semantics {
      description "Element expects special treatment in Exosense:\n" +
	"Arg: timeout | schedule";
      argument class;
    }

    extension rpc-include-module-name {
      description
	"Use for upstream RPCs when you don't want the module name " +
	"included in the method attribute. Argument is 'true' or 'false'";
      argument bool;
    }

    //
    // Status codes used by the system
    //
    typedef status-code {

        type enumeration {
	    enum accepted {
		description "Operation has been accepted and is in progress.";
		value 0;
	    }

	    enum complete {
		description "The operation has completed successfully.";
		value 1;
	    }

	    enum time-out {
		description "Operation has timed out.";
		value 2;
	    }

	    enum device-connected {
		description
		  "A connection has been established with " +
		  "the device addressed by the operation.";
		value 3;
	    }

	    enum device-unknown {
		description
		  "The device-id provided with the operation is unknown.";
		value 4;
	    }


	    enum device-error {
		description
		  "The device encountered an error when carrying out " +
		  "the operation. See device-status.";
		value 5;
	    }

	    enum format-error {
		description "The RPC had an incorrect element structure.";
		value 6;
	    }

	    enum value-error {
		description
		  "The RPC had illegal values in one or more of its elements.";
		value 7;
	    }
	}
        description
	  "Define status codes used throughout the JSON RPC interface.";
    }

    //
    // Leafs included in all rpc requests
    //
    grouping std-request {
        description 
"Elements included in all RPC requests sent from the backend server to " +
"a device. This group must be included in all yang RPCs specified in " +
"configuration sets and packages to define elements needed by the " +
"Exosense Server when it routes RPCs to target devices.";

	leaf account {
	    description
"The account, accessible by the authorizing user, to which the target " +
"device or device group belongs.  If no account is given, the " +
"authorizing user assumes to have access to only one account, which " +
"will be used. If no account is given, and the user has access to " +
"multiple accounts, an error is returned.";
	    type exodm_type:id-string;
	}
	leaf timeout {
	    type timer;
	    exo:semantics "timeout";
	    description 
"UTC time when this operation times out. If the device has not " +
"processed and replied to this request by the given time, a time-out " +
"error will be sent back to the notificaiton-url.";
	}

	leaf notification-url {
	    type string {
		length "1..512";
	    }
	    description 
"URL to send transaction notifications to.  This URL will be used for
all notifications sent back by either the device or the Exosense
Server that have the same transaction-id as the original RPC call.";
	}

	leaf device-id {
	    type exodm_type:id-string;
	    description 
"Device ID or Group Name of the device/group that is to receive the " +
"request.";
	}

	leaf transaction-id {
	    type transaction-id;
	    description 
"Transaction ID assigned by the caller. This ID will be provided in the " +
"JSON-RPC reply and in any callback notifications sent to the backend server, " +
"by either the device or the Exosense Server, in response to the " +
"transaction.";
	}
    }


    //
    // Standard callback elements
    //
    grouping std-callback {
        description 
"Elements included in all callback notifications, sent from Exosense or " +
"a device, to the backend server in response to a previous JSON-RPC " +
"request.";

	leaf transaction-id {
	    type transaction-id;
	    description 
		"The transaction that this callback is made"
	      + " in response to.";
	}

	leaf rpc-status {
	    type status-code;
	    description "Status of operation in progress.";
	}

	leaf rpc-status-string {
	    type string;
	    description "Additional status information, "
	      + "in human readable format,";
	}

	leaf final {
	    type boolean;
	    description "This is the final callback for the given operation";
	}
    }

    //
    // Configuration entry
    //
    grouping configuration-entry {
      description
	"A configuration entry used (in a list) by " +
	"set-config-entry and set config-set.";

        leaf name {
            description "Specifies the configuration entry to set";
            type string;
        }

        anyxml val {
            description "Value of the given configuration data.";
        }
    }
}

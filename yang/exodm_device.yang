submodule exodm_device {
  belongs-to "exodm" {
    prefix exodm;
  }

  import exodm_type {
    prefix exodm_type;
  }

  description 
      "API for Exosense Device Management Server - Device Management " +
      "(C) 2013 Feurelabs, Inc - All Rights Reserved.";

  contact "ulf.wiger@feuerlabs.com";
  organization "Feuerlabs, Inc.";


  grouping device-obj {
    description "Device object data";

    leaf device-id {
      description "Account-wide unique device-id";
      type exodm_type:id-string;
      mandatory true;
    }
    leaf device-type {
      description "Type of device, as given by a previous [exodm:create-device-type] call.";
      type exodm_type:id-string;
      mandatory true;
    }
  }

  // INTERNAL INFO!
  // <uid>/devices/<did>/name    = string()
  // <uid>/devices/<did>/msisdn  = msisdn()
  // <uid>/devices/<did>/imsi    = imsi()
  // <uid>/devices/<did>/imei    = imei()
  // <uid>/devices/<did>/__ck    = uint64()
  // <uid>/devices/<did>/__sk    = uint64()
  // <uid>/devices/<did>/groups[1]/__gid = uint32()
  //
  list devices {
    description "Device information.";
    key "did";

    leaf did {
      description "Device identifer.";
      // internally it must be escaped!
      type exodm_type:id-string;
    }

    leaf name {
      description "Optional device name.";
      type string;
    }

    list groups {
      description "Device group member ship.";
      key "id";

      leaf id {
        description "access index";
        type uint32;
      }

      leaf __gid {
        description "group id";
        type uint32;
      }
    }
  }

  rpc create-device {
    description
"**Create a new device in the Exosense Server**\n\n " +
"This commands sets up a new device to be owned and managed by the given account. " +
"The mandatory device-id must be unique across all devices and device groups under " +
"the owning account. The device type is previously created through a " +
"[exodm:create-device-type] command." +
"\n\n\n\n" +
"The new device can optionally have attributes set for it, where the " +
"structure of these attributes is defined by the provided device type. " +
"The device type has a yang module, created through an " +
"[exodm:create-yang-module] command, tied to it. Inside this module, a " +
"container defines the attribute structure that should be applied to " +
"all devices assigned to the given device type. " +
"\n\n\n\n" +
"Unlinke device configuration data (see [exodm:create-package]), device "+
"attributes will not be sent to the device. Instead they will be stored " +
"locally on the Exosense Server." +
"\n\n\n\n" +
"The attributes can be set through this command and [exodm:update-device], " +
"and retrieved through [exodm:lookup-device].  " +
"Protocol plugins can also access the device attributes to locate " +
"network addresses and other information necessary for the protocol to " +
"communicate with a device." +
"\n\n\n\n" +
"Once a device has been provisioned through this command, the protocol " +
"plugin associated with the assigned device type can match an incoming " +
"device ID from the connected device with device attribute data in " +
"order to retrieve encryption keys, passwords, network addresses, " +
"certificates, etc, that can be used by the plugin to authenticate the " +
"device and secure communication with it. Please note that all device " +
"attributes, apart from the mandatory device type and device-id, are " +
"opaque to the Exosense Server. It is up to the yang-file and protocol " +
"plugin author to agree on the structure of the attributes assigned to " +
"a device of the given device type.";
    input {
      leaf account {
        description
"The account, accessible by the authorizing user, to which the device type belongs." +
"If no account is given, the authorizing user assumes to have access " +
"to only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.";
        type exodm_type:id-string;
      }

      uses device-obj;
      anyxml attributes {
	  description
"Attributes to set for this device. The structure of the attributes is " +
"defined by the yang module provided to the [exodm:create-device-type] " +
"command that created the device type that the device is assigned to.";
      }
    }

    output {
      leaf result {
	  description "Result of the operation";
	  type exodm_type:result-code;
      }
    }
  }

  rpc update-device {
    description
"**Update the attributes of an existing device**\n\n" +
"This command updates the attributes of the given device. Please note " +
"that the device-id and device type of an existing device cannot be " +
"modified. For these operations, the device needs to be deleted with " +
"[exodm:delete-device] and then re-created with [exodm:create-device]. " +
"\n\n\n\n " +
"The attributes that can be updated for a device is defined by the " +
"assigned device type. Please see [exodm:create-device] for information " +
"on how device attributes are specified and managed.";

    input {
      leaf account {
	  description
"The account, accessible by the authorizing user, to which the device type belongs." +
"If no account is given, the authorizing user assumes to have access " +
"to only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.";
	  type exodm_type:id-string;
      }

      anyxml attributes {
	  description
"Attributes to set for the device. The structure of the attributes is " +
"defined by the yang module provided to the [exodm:create-device-type] " +
"command that created the device type that the device is assigned to.";
      }
    }
    output {
      leaf result {
	  description "Result of the operation";
	  type exodm_type:result-code;
      }
    }
  }

  rpc lookup-device {
    description
"**Retrieve information about a given device**\n\n" +
"This command retrieves the device id, the device type, and the optional device " +
"attributes for a given device owned by the provided avcount. " +
"\n\n\n\n " +
"The format of the device attributes, if present, is specified by the device type " +
"the device is assgined to.  The device type, when it is created " +
"through the [exodm:create-device-type] command, can optionally refer " +
"to a yang specification module (created with " +
"[exodm:create-yang-module]), that defines the structure of the " +
"attributes that all devices of the given type will have.";

    input {
      leaf account {
        description
"The account, accessible by the authorizing user, to which the device belongs." +
"If no account is given, the authorizing user assumes to have access " +
"to only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.";
        type exodm_type:id-string;
      }

      leaf device-id {
	  description
"The ID of the device to look up. The device has previously been created " +
"through [exodm:create-device] command.";

        type exodm_type:id-string;
        mandatory true;
      }
    }
    output {
      leaf result {
	  description "Result of the operation";
	  type exodm_type:result-code;
      }
      uses device-obj;
      anyxml attributes {
	  description
"Attributes set for this device. The structure of the attributes is " +
"defined by the yang module provided to the [exodm:create-device-type] " +
"command that created the device type that the device is assigned to.";
      }
    }
  }

  rpc list-devices {
    description
"**List all devices created under an account**\n\n" +
"This command lists the device ID of all devices created under the " +
"given account through the [exodm:create-device] command. Detailed " +
"information can be given for a device through the " +
"[exodm:lookup-device] command." +
"\n\n\n\n"+
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of device IDs.";

    input {
      leaf account {
        description
"The account, accessible by the authorizing user, to which the devices belong." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.";
        type exodm_type:id-string;
      }
      leaf n {
	  description
"Maximum number of entries to return. More devices may be available " +
"after the last returned element.";
        type uint32;
        mandatory true;
      }
      leaf previous {
        description
'Start the fetch at the first device after the device with the ' +
'ID specified by this argument. Use "" if the fetch is to start from the beginning';

        type exodm_type:id-string;
        mandatory true;
      }
    }
    output {
      list devices {
	  uses device-obj;
      }
    }
  }


  rpc delete-devices {
    description
"**Delete an existing device**\n\n" +
"This command deletes a device, previously created with " +
"[exodm:create-device], from the Exosense Server. This command also " +
"deletes the device's attributes, previously set-up throguh through the " +
"[exodm:create-device] and [exodm:update-device] commands.";

    input {
	leaf account {
	    description
"The account, accessible by the authorizing user, to which the device belong." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.";

	    type exodm_type:id-string;
	}
	leaf device-id {
	    description "The ID of the device to remove";
	    type exodm_type:id-string;
	}
    }

    output {
      leaf result {
	  description "Result of the operation";
	  type exodm_type:result-code;
      }
    }
  }
}


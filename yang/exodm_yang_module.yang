submodule exodm_yang_module {

  belongs-to "exodm" {
    prefix exodm;
  }

  import exodm_type {
    prefix exodm_type;
  }

  description 
     "API for Exosense Device Management Server - Yang Module Management " +
     "(C) 2013 Feurelabs, Inc - All Rights Reserved.";


  contact "magnus.feuer@feuerlabs.com";
  organization "Feuerlabs, Inc.";

  rpc create-yang-module {
    description
"**Upload a yang file**\n\n" +
"This commands parses the provided yang file and stores it as a yang " +
"module in the Exosense Server. The yang file is expected to be " +
"compliant with RFC 6020. Once a yang module has been created, " +
"it can be used to specify the structure of device attributes, package " +
"RPC APIs, and package configuration data. Please see " +
"[exodm:create-device-type] for details on device attributes, and " +
"[exodm:create-package] for details on package RPC API and " +
"configuration data structure. " +
"\n\n\n\n " +
"A yang module can be created either in the account or system " +
"repository on the Exosense Server. Modules created in the \"system\ " +
"repository will be accessible to all accounts on the system, while " +
"modules created in the \"account\" repository will only be visible and " +
"accessible to the account invoking this command.  Only the sysadm " +
"account can create a yang module in the system repository." +
"\n\n\n\n" +
"If the yang module is uploaded to the \"user\" repo, " +
"then the name of the yang module must be unique among all existing yang " +
"modules under the given account, as well as being unique among all " +
"existing yang modules in the \"system\" repository. " +
"\n\n" +
"If the yang module is uploaded to the \"system\" repo, " +
"then the name of the yang module must be unique among all existing yang " +
"modules created in the Exosense Server. No existing yang module in any \"user\" repository "+
"under any account can have the same name as the new module. Neither can the new module " +
"have the same name as an existing yang module in the \"system\" repository.";

    input {
      leaf account {
        description
"The account, accessible by the authorizing user, in whose repository " +
"the yang modules should be created." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.\n\n " +
"This argument is not used if the yang module to is to be created in the \"system\" repository.";

        type exodm_type:id-string;
      }
      leaf repository {
	  description
	      "Where to store the module in the Exosense Server: Can be \"system\" or \"account\"";
	  type exodm_type:id-string;
	  default "account";
      }
      leaf name {
	  description
	      "Name of the uploaded yang module, including the .yang prefix. Example is commands.yang. ";
	  type exodm_type:id-string;
	  mandatory true;
      }

      leaf yang-module {
        description "The yang code to create the module from";

        type string {
          length "1..100000";
        }
        mandatory true;
      }
    }
    output {
      leaf result {
	  description "Result of the operation";
	  type exodm_type:result-code;
      }
    }
  }

  rpc delete-yang-module {
    description
"**Delete an existing yang module**\n\n " +
"This command deletes a yang module previously created through [exodm:create-yang-module]. " +
"This command will fail if there are any device types and/or packages currently referring " +
"to the given yang module.";

    input {
      leaf account {
	  description
"The account, accessible by the authorizing user, to which the yang modules belongs." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.\n\n " +
"This argument is not used if the yang module to delete resides in the \"system\" repository.";
	  type exodm_type:id-string;
      }

      leaf repository {
        description
          "The repository where the module resides: Currently \"system\" or \"account\".";
        type exodm_type:id-string;
	default "account";
      }

      leaf name {
        description "Name of the yang module to delete. Example iscommands.yang'";
        type exodm_type:id-string;
        mandatory true;
      }

    }

    output {
      leaf result {
	  description "Result of the operation";
	  type exodm_type:result-code;
      }
    }
  }

  rpc lookup-yang-module {
    description "**Retreive yang module**\n\n." +
	"This command returns the content of a yang module previously created through " +
	"[exodm:create-yang-module].";

    input {
      leaf account {
	  description
"The account, accessible by the authorizing user, to which the yang modules belongs." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.\n\n " +
"This argument is not used if the yang module to delete resides in the \"system\" repository.";
	  type exodm_type:id-string;
      }

      leaf repository {
        description
          "The repository where the module resides: Currently \"system\" or \"account\".";
        type exodm_type:id-string;
	default "account";
      }

      leaf name {
	  description "Name of the yang module to retrieve. Include suffix (module.yang)";
        type exodm_type:id-string;
        mandatory true;
      }
    }

    output {
      leaf result {
        type exodm_type:result-code;
      }
      leaf-list yang-modules {
        description "A list of zero or one yang source files.";
        type string;
      }
    }
  }

  rpc list-yang-modules {
    description
"**List the yang modules created in a repository**" +
"This commands lists all yang modules under the account-specific or "+
"system-wide repository." +
"\n\n\n\n" +
"This command allows for chunks of the result set to be returned " +
"to facilitate a sequential retrieval of device IDs.";

    input {
      leaf account {
        description
"The account, accessible by the authorizing user, to which the yang modules belongs." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.\n\n " +
"This argument is not used if the yang modules to list resides in the \"system\" repository.";

        type exodm_type:id-string;
      }

      leaf repository {
        description
          "The repository where the module resides: Currently \"system\" or \"account\".";
        type exodm_type:id-string;
	default "account";
      }

      leaf n {
        description
"Maximum number of entries to return. More modules may be available " +
"after the last returned element.";

        type uint32;
        mandatory true;
      }
      leaf previous {
        description
'Start the fetch at the first module after themodule with the ' +
'name specified by this argument. Use "" if the fetch is to start from the beginning';

        type exodm_type:id-string;
        mandatory true;
      }
    }

    output {
      leaf-list yang-modules {
	  description "List of yang modules.";
	  type exodm_type:id-string;
      }
    }
  }

  rpc add-execution-permission {
    description 
	"**Add execution permission to a specific Yang Module**\n\n." +
	"This command adds the right for a pre-defined role to execute a given RPC within " +
	"a yang module previously uploaded through [exodm:create-yang-module].\n\n" +
	"When this command completes, all users assigned to the role will have permission " +
	"to invoke the given RPC in the module for as long as each user continues to " +
	"be assigned to the role, and the role continues to have execution permission " +
	"to the RPC.\n\n" +
	"[exodm:list-account-roles] will list all roles that available " +
	"for execution assignment in the account.";
    input {
      leaf account {
        description
"The account, accessible by the authorizing user, to which the yang modules belongs." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.\n\n " +
"This argument is not used if the yang modules to list resides in the \"system\" repository.";
        type exodm_type:id-string;
      }

      leaf repository {
        description
          "The repository where the module resides: Currently \"system\" or \"account\".";
        type exodm_type:id-string;
	default "account";
      }

      leaf name {
        description "Name of yang module, including extension, e.g. 'mymodule.yang'";
        type exodm_type:id-string;
        mandatory true;
      }
      leaf rpcname {
        description "Name of rpc to grant execution permission to, e.g. 'config-device'";
        type exodm_type:id-string;
        mandatory true;
      }
  
      leaf role {
        description 
	    "Name of role to add permission to. See [exodm:list-account-roles] " +
	    "for a list of roles available to the account.";

        type exodm_type:id-string;
        mandatory true;
      }

    }

    output {
      leaf result {
        type exodm_type:result-code;
      }
    }
  }

  rpc remove-execution-permission {
    description 
	"**Removeexecution permission from a specific Yang Module**\n\n." +
	"This command removes the right for a pre-defined role to execute a given RPC within " +
	"a yang module previously uploaded through [exodm:create-yang-module].\n\n" +
	"When this command completes, none of the users assigned to the role will have " +
	"permission to invoke the given RPC in the module, unless they are assigned to " +
	"other roles that also have execution permission for the given RPC.\n\n "+
	"[exodm:list-account-roles] will list all roles that available " +
	"for execution assignment in the account.";
    input {
      leaf repository {
        description
          "The repository where the module resides: Currently \"system\" or \"account\".";
        type exodm_type:id-string;
	default "account";
      }

      leaf name {
        description "Name of yang module, including extension, e.g. 'mymodule.yang'";
        type exodm_type:id-string;
        mandatory true;
      }
      leaf rpcname {
        description "Name of rpc to revoke execution permission from, e.g. 'config-device'";
        type exodm_type:id-string;
        mandatory true;
      }
  
      leaf role {
        description 
	    "Name of role to revoke permission from. See [exodm:list-account-roles] " +
	    "for a list of roles available to the account.";

        type exodm_type:id-string;
        mandatory true;
      }

    }

    output {
      leaf result {
        type exodm_type:result-code;
      }
    }
  }


  rpc list-execution-permission {
    description 
	"**List all roles with execution permission for a specific Yang Module**\n\n." +
	"This command lists all roles that currently have execution permission for " +
	"an RPC in a yang module previously uploaded through [exodm:create-yang-module].\n\n" +
	"When this command completes, all users assigned to the role will have permission " +
	"Each role is listed with their names and RPCs within the module that they can execute.";
    input {
      leaf account {
        description
"The account, accessible by the authorizing user, to which the yang modules belongs." +
"If no account is given, the authorizing user assumes to have access to " +
"only one account, which will be used. If no account is given, and " +
"the user has access to multiple accounts, an error is returned.\n\n " +
"This argument is not used if the yang modules to list resides in the \"system\" repository.";
        type exodm_type:id-string;
      }

      leaf repository {
        description
          "The repository where the module resides: Currently \"system\" or \"account\".";
        type exodm_type:id-string;
	default "account";
      }

      leaf name {
        description "Name of yang module, including extension, e.g. 'mymodule.yang'";
        type exodm_type:id-string;
        mandatory true;
      }
    }

    output {
      list roles {
        leaf name {
          description "Name of the role."; 
          type exodm_type:id-string;
        }
        leaf-list rpcs {
          description "List of RPCs that this role can execute within the module"; 
          type exodm_type:id-string;
        }
      }
    }
  }
}

